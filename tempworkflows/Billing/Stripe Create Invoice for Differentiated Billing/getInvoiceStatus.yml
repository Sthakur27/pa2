id: getInvoiceStatus
type: datasource
subtype: SqlQueryUnified
resourceName: 4465247e-0868-4261-ae6b-789273d5a26a
resourceDisplayName: retool_db
template:
  ordered:
    - queryRefreshTime: ''
    - records: ''
    - lastReceivedFromResourceAt: null
    - databasePasswordOverride: ''
    - queryDisabledMessage: ''
    - servedFromCache: false
    - offlineUserQueryInputs: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - workflowParams: null
    - resourceNameOverride: ''
    - runWhenModelUpdates: false
    - workflowRunId: null
    - showFailureToaster: true
    - query: >-
        select 
          count(1) as invoice_exists
        from dim_invoice_status

        where ds = {{ params.data.ds }}

        and retool_customer_id = {{ params.data.retool_customer_id }} and status
        != 'invalid'
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - error: null
    - workflowRunBodyType: raw
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - warningCodes: []
    - data: null
    - recordId: ''
    - importedQueryInputs:
        ordered: []
    - isImported: false
    - showSuccessToaster: true
    - dataArray: []
    - cacheKeyTtl: ''
    - filterBy: ''
    - requestSentTimestamp: null
    - databaseHostOverride: ''
    - metadata: null
    - workflowActionType: null
    - editorMode: sql
    - queryRunTime: null
    - actionType: ''
    - changesetObject: ''
    - shouldUseLegacySql: false
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - finished: null
    - databaseNameOverride: ''
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - resourceTypeOverride: null
    - watchedParams: []
    - enableErrorTransformer: false
    - enableBulkUpdates: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - evalType: script
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - bulkUpdatePrimaryKey: ''
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events: []
    - tableName: ''
    - queryTimeout: '120000'
    - workflowId: null
    - requireConfirmation: false
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - workflowBlockPluginId: null
    - databaseUsernameOverride: ''
    - shouldEnableBatchQuerying: false
    - doNotThrowOnNoOp: false
    - offlineQueryType: None
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2023-05-30T21:32:38.512Z
blockData:
  top: 48
  left: 1248
  uuid: 7f447e90-07ac-4d53-b721-5fd0c73196e3
  comment:
    body: >-
      Check if we've already attempted to create an invoice for that
      date/customer combination. 


      If yes, we'll proceed only with `force_create` set to `true` or the
      current status is 'invalid'
    visible: true
    pluginId: getInvoiceStatus-comment
  pluginId: getInvoiceStatus
  blockType: default
  editorType: SqlQueryUnified
  resourceName: 4465247e-0868-4261-ae6b-789273d5a26a
  responseHeight: 96
  retryPanelOpen: false
  responsePanelState: open
  incomingOnSuccessEdges:
    - 3ff82eb1-8227-44f5-9ced-a925463e34f1
