id: setStatusToPending
type: datasource
subtype: JavascriptQuery
resourceName: JavascriptQuery
template:
  ordered:
    - queryRefreshTime: ''
    - lastReceivedFromResourceAt: null
    - queryDisabledMessage: ''
    - servedFromCache: false
    - offlineUserQueryInputs: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - workflowParams: null
    - resourceNameOverride: ''
    - runWhenModelUpdates: false
    - workflowRunId: null
    - showFailureToaster: true
    - query: |-
        await updateInvoiceStatus(
          params.data.ds, 
          params.data.stripe_customer_id, 
          params.data.retool_customer_id,
          params.data.org_sid,
          params.data.deployment_id,
          'pending',
          null
        )

        await postUpdateToDatadog('pending')
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - error: null
    - workflowRunBodyType: raw
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - data: null
    - importedQueryInputs:
        ordered: []
    - _additionalScope: []
    - isImported: false
    - showSuccessToaster: true
    - cacheKeyTtl: ''
    - requestSentTimestamp: null
    - metadata: null
    - workflowActionType: null
    - editorMode: sql
    - queryRunTime: null
    - changesetObject: ''
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - finished: null
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - resourceTypeOverride: null
    - watchedParams: []
    - enableErrorTransformer: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - evalType: script
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events: []
    - queryTimeout: '120000'
    - workflowId: null
    - requireConfirmation: false
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - workflowBlockPluginId: null
    - offlineQueryType: None
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2023-05-30T21:55:28.544Z
blockData:
  top: 48
  left: 2096
  uuid: a038e37f-a1e6-4cf0-b466-e943c004e9c4
  pluginId: setStatusToPending
  blockType: code
  editorType: JavascriptQuery
  resourceName: JavascriptQuery
  incomingPorts:
    - portId: 37371f36-ce4e-4e67-b738-77f74517b390
      blockId: 94a5bb39-b221-4755-8a6b-56dce7433d34
  responseHeight: 96
  retryPanelOpen: false
  responsePanelState: open
  incomingOnSuccessEdges:
    - 0a1844a9-b278-4e92-b6e6-e207be721407
    - c9256355-6ea2-4906-89e3-10a532c4a90f
