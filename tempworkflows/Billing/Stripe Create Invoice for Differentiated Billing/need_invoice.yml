id: need_invoice
type: datasource
subtype: JavascriptQuery
resourceName: JavascriptQuery
template:
  ordered:
    - queryRefreshTime: ''
    - lastReceivedFromResourceAt: null
    - queryDisabledMessage: ''
    - servedFromCache: false
    - offlineUserQueryInputs: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - workflowParams: null
    - resourceNameOverride: ''
    - runWhenModelUpdates: false
    - workflowRunId: null
    - showFailureToaster: true
    - query: |-
        if ((
          (params.data.invoice_builders + params.data.invoice_endusers > 0)
          && (params.data.prorate_team + params.data.prorate_business > 0)
        )
        || params.data.invoice_workflows_gb_used > 1) {
          executePathAtMostOnce('0')
        }
        else { executePathAtMostOnce('1') }
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - error: null
    - workflowRunBodyType: raw
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - data: null
    - importedQueryInputs:
        ordered: []
    - _additionalScope: []
    - isImported: false
    - showSuccessToaster: true
    - cacheKeyTtl: ''
    - requestSentTimestamp: null
    - metadata: null
    - workflowActionType: null
    - editorMode: sql
    - queryRunTime: null
    - changesetObject: ''
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - finished: null
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - resourceTypeOverride: null
    - watchedParams: []
    - enableErrorTransformer: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - evalType: script
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events: []
    - queryTimeout: '120000'
    - workflowId: null
    - requireConfirmation: false
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - workflowBlockPluginId: null
    - offlineQueryType: None
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2023-05-30T17:33:05.102Z
blockData:
  top: 48
  left: 2608
  uuid: 7bd3e64b-9e20-49ce-94d7-d37f0d3bd067
  comment:
    body: >-
      We don't want to create an invoice for $0, so let's check if there's
      anything we should charge for.
    visible: true
    pluginId: need_invoice-comment
  options:
    conditions:
      - id: 971fd430-61df-4592-b4a2-0c0b06c94d4d
        type: if
        statement: |-
          (
            (params.data.invoice_builders + params.data.invoice_endusers > 0)
            && (params.data.prorate_team + params.data.prorate_business > 0)
          )
          || params.data.invoice_workflows_gb_used > 1
        outgoingPortId: 62640781-5be1-45d7-9262-8fc088ef0372
      - id: f5e92819-5f51-42b6-be34-5461f462e78c
        type: else
        statement: ''
        outgoingPortId: 87695c08-7a7d-496e-a31d-2fd0b8e02a27
  pluginId: need_invoice
  blockType: conditional
  editorType: JavascriptQuery
  isMinimized: false
  resourceName: JavascriptQuery
  incomingPorts: []
  outgoingPorts:
    - id: 62640781-5be1-45d7-9262-8fc088ef0372
      name: '0'
      type: conditional
    - id: 87695c08-7a7d-496e-a31d-2fd0b8e02a27
      name: '1'
      type: conditional
  responseHeight: 96
  retryPanelOpen: false
  responsePanelState: open
  incomingOnSuccessEdges:
    - a038e37f-a1e6-4cf0-b466-e943c004e9c4
