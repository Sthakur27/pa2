<GlobalFunctions>
  <SqlQueryUnified
    id="query1"
    actionType=""
    allowedGroups={[]}
    bulkUpdatePrimaryKey=""
    cacheKeyTtl=""
    changeset=""
    changesetIsObject={false}
    changesetObject=""
    confirmationMessage={null}
    data={null}
    dataArray={[]}
    databaseHostOverride=""
    databaseNameOverride=""
    databasePasswordOverride=""
    databaseUsernameOverride=""
    doNotThrowOnNoOp={false}
    editorMode="sql"
    enableBulkUpdates={false}
    enableCaching={false}
    enableErrorTransformer={false}
    enableTransformer={false}
    error={null}
    errorTransformer="// The variable 'data' allows you to reference the request's data in the transformer. 
// example: return data.find(element => element.isError)
return data.error"
    filterBy=""
    finished={null}
    importedQueryDefaults={{ ordered: [] }}
    importedQueryInputs={{ ordered: [] }}
    isFetching={false}
    isImported={false}
    lastReceivedFromResourceAt={null}
    metadata={null}
    notificationDuration=""
    offlineQueryType="None"
    offlineUserQueryInputs=""
    playgroundQueryId={null}
    playgroundQuerySaveId="latest"
    playgroundQueryUuid=""
    privateParams={[]}
    query=""
    queryDisabled=""
    queryDisabledMessage=""
    queryFailureConditions=""
    queryRefreshTime=""
    queryRunTime={null}
    queryThrottleTime="750"
    queryTimeout="10001"
    queryTriggerDelay="0"
    rawData={null}
    recordId=""
    records=""
    requestSentTimestamp={null}
    requireConfirmation={false}
    resourceDisplayName="asdf12"
    resourceName="5f06f56d-d022-4efa-8382-0301f28e93e9"
    resourceNameOverride=""
    resourceTypeOverride={null}
    runWhenModelUpdates={true}
    runWhenPageLoads={false}
    runWhenPageLoadsDelay=""
    servedFromCache={false}
    shouldEnableBatchQuerying={false}
    shouldUseLegacySql={false}
    showFailureToaster={true}
    showLatestVersionUpdatedWarning={false}
    showSuccessToaster={true}
    showUpdateSetValueDynamicallyToggle={true}
    successMessage=""
    tableName=""
    timestamp={0}
    transformer="// type your code here
// example: return formatDataAsArray(data).filter(row => row.quantity > 20)
return data"
    updateSetValueDynamically={false}
    watchedParams={[]}
  />
</GlobalFunctions>
